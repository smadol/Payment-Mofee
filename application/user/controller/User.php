<?php
/**
 * Author: Single Dog
 * Github: https://github.com/SingleSheep
 * Date: 2018/2/15 - 22:06
 */

namespace app\user\controller;

use app\common\model\Merchant;
use app\common\model\MerchantOrder;
use app\common\model\MerchantSettle;
use app\common\model\MerchantWallet;
use think\Db;
use think\Exception;
use think\Request;

/**
 * 商户后台
 * Class Merchant
 * @package app\index\controller
 */
class User extends Base
{

    public function _initialize()
    {
        parent::_initialize();
        // TODO: Change the autogenerated stub
        // 登录检查
        if ($this->userInfo == ''){
            $this->redirect('/user/login?noLogin');
        }
    }

    /**
     * 用户中心
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function index(){

        //获取当日
        //$cur_date = strtotime(date('Y-m-d'));
        $today_date = getTimestamp('today');
        $yesterday_date = getTimestamp('yesterday');
        $Ordermodel = new MerchantOrder();

        $where = [
            'mchId'         =>  ['=',$this->uid],
            'create_time'   =>  ['>',$today_date['start']]
        ];

        //今日总数
        $count = $Ordermodel->where($where)->select();
        $amount = $Ordermodel->where($where)->sum('amount');
//        $total = '';
//        foreach($res as $key=>$val){
//            $total+= $val['amount'];
//        }
        $now_day_count  = count($count);
        $now_day_amount = $amount;

        //今日成功
        $success_count = $Ordermodel
            ->where($where)
            ->where("status >= '2'")
            ->select();
        $success_total = $Ordermodel
            ->where($where)
            ->where("status >= '2'")
            ->sum('amount');
        $now_day_success_count = count($success_count);
        $now_day_success_amount = $success_total;

        //昨日总计订单
        $last_count = $Ordermodel
            ->where([
                'mchId'         =>  ['=',$this->uid],
                'create_time'   =>  ['>',$yesterday_date['start']],
            ])
            ->where('create_time','<',$yesterday_date['end'])
            ->select();
        //昨日总计订单金额
        $last_amount = $Ordermodel
            ->where([
                'mchId'         =>  ['=',$this->uid],
                'create_time'   =>  ['>',$yesterday_date['start']],
            ])
            ->where('create_time','<',$yesterday_date['end'])
            ->sum('amount');
        //获取总交易额
        $userWallet = db('merchant_wallet')->where(['uid'  => $this->uid])
            ->find();
        //获取所有订单统计
        $orderCount = $Ordermodel->where(['mchId' =>  $this->uid])
            ->count();

        $this->assign('now_day_count',$now_day_count);
        $this->assign('now_day_amount',$now_day_amount);

        $this->assign('last_day_count',count($last_count));
        $this->assign('last_day_amount',$last_amount);

        $this->assign('now_day_success_count',$now_day_success_count);
        $this->assign('now_day_success_amount',$now_day_success_amount);

        $this->assign('userWallet',$userWallet);
        $this->assign('orderCount',$orderCount);

        return $this->fetch();
    }

    /**
     * 商户信息
     * @url /user/account
     * @return mixed|\think\response\Json
     * @throws \think\exception\DbException
     */
    public function account()
    {
        if (Request::instance()->isPost()){
            //POST提交修改信息
            $Data = Request::instance()->post();
            $Array['contact']   = $Data['contact'];
            $Array['payment']    = $Data['payment'];
            $Array['account']    = $Data['account'];
            //数据存储
            $res = (new Merchant())
                ->where(['uid'=>$this->uid])
                ->update($Array);
            if($res){
                return result();
            }else{
                return result('','0','未知错误');
            }
        }
        $userData = Merchant::get(['uid'  => $this->uid]);
        $this->assign('userData',$userData);
        return $this->fetch();
    }

    //实名认证
    public function verify(){
        return $this->fetch('verified');
    }

    //API安全中心
    public function security()
    {
        return $this->fetch();
    }

    /**
     * @return mixed|\think\response\Json
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function apply(){
        //获取钱包
        $userWallet = (new MerchantWallet())->where(['uid'  => $this->uid])->find();
        if(Request::instance()->isPost()){
            $settleData = Request::instance()->post();
            //数据校验
            //1.验证码、
            if ($settleData['code']!==cache('code_'.$this->userInfo['uid'])){
                return result('','0','验证码错误！');
            }
            //2.余额是否充足
            //余额是否可提现
            if($settleData['amount'] <= $userWallet['total']){
                Db::startTrans();
                try{
                    //生成结算订单
                    $Settle = new MerchantSettle();
                    $Settle->uid     = $this->uid;
                    $Settle->onum    = date("YmdHis"). rand(0, 999);//结算单号
                    $Settle->amount  = $settleData['amount'];
                    $Settle->payment = $this->userInfo['payment'];
                    $Settle->save();
                    //处理账户余额数据
                    $userWallet->setDec('total',$settleData['amount']);
                    //结算到账完成才该表total
                    Db::commit();
                    return result($settleData['amount']);
                } catch (Exception $ex) {
                    Db::rollback();
                    return result('','0',$ex->getMessage());
                }
            }
            return result('','0','账户余额不足，无法结算');

        }
        $this->assign('wallet',$userWallet);
        return $this->fetch();
    }

    /**
     * 结算记录
     * @return mixed
     * @throws \think\exception\DbException
     */
    public function settle(){
        //获取结算记录
        $model = new MerchantSettle();
        $settleCount = $model->where(['uid' =>  $this->uid])->count();
        $settleData = $model->where(['uid' =>  $this->uid])
            ->order(['create_time'=>'desc'])
            ->paginate(15);
        $this->assign('settleCount',$settleCount);
        $this->assign('settleData',$settleData);
        return $this->fetch();
    }

    /**
     * 支付订单记录
     * @return mixed
     * @throws \think\exception\DbException
     */
    public function trade()
    {
        $model = new MerchantOrder();
        $orderData = $model->where(['mchId' =>  $this->uid])
            ->order(['create_time'=>'desc'])
            ->paginate(15);
        $this->assign('orderData',$orderData);
        return $this->fetch();
    }


}